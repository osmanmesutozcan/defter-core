type Query {
    groups: [Group]!
#    affiliations: [Member]!
#    splits(groupId: String!): [Split]!
#    settlement(groupId: String!): Settlement!
}

type Mutation {
#    createGroup(createGroupInput: CreateGroupInput): String!
#    addSplitToGroup(addSplitToGroupInput: AddSplitToGroupInput): String!
}

input CreateGroupInput {
    name: String!
    members: [String]!
    currency: String!
}

input AddSplitToGroupInput {
    groupId: String!
    payedBy: String!
    total: Int!
    description: String!
    members: [SplitMemberInput]!
}

input SplitMemberInput {
    id: String!
    locked: Boolean!
    share: Float!
}

type Group {
    id: String!
    name: String!
    currency: String!
#    updateAt: String!
    balance: Float!
    numberOfSplits: Int!

#    members: [Member]!
}

type Member {
    id: String!
    name: String!
    email: String!
    avatar: String!
}

type Split {
    id: String!
    total: Int!
    groupId: String!
    description: String!
    members: [SplitMember]!
    payedBy: Member!
    submittedBy: Member!
}

type SplitMember {
    id: String!
    locked: Boolean!
    share: Float!
}

type Settlement {
    summary: SettlementSummary!
    members: [SettlementMember]!
}

type SettlementSummary {
    totalSplits: Int!
}

type SettlementMember {
    userId: String!
    balance: Float!
}
