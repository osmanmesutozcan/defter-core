type Query {
    groups: [Group]!
    invitations: [Invitation]!
    affiliations: [Member]!
    splits(groupId: String!): [Split]!
    settlement(groupId: String!): Settlement!
}

type Mutation {
    logout: Boolean!
    login(email: String!, password: String!): AuthPayload!
    createUser(name: String!, email: String!, password: String!): String!
    createGroup(name: String! currency: String! members: [GroupMemberInput]!): String!
    answerToGroupInvitation(invitationId: String, answer: InvitationAnswer): String!

    addSplitToGroup(
        groupId: String!
        payedBy: String!
        total: Int!
        description: String!
        currency: Currency
        members: [SplitMemberInput]!
    ): String!
}

input SplitMemberInput {
    id: String!
    locked: Boolean!
    share: Float!
}

input GroupMemberInput {
    id: String!
    email: String!
}

enum InvitationAnswer {
    ACCEPTED
    REJECTED
}

enum Currency {
    USD
    TRY
    EURO
}

type Invitation {
  id: String!
  answer: InvitationAnswer
}


# TODO: Return current user
type AuthPayload {
    me: Member!
    token: String!
}

type Group {
    id: String!
    name: String!
    currency: String!
    #    updateAt: String!
    balance: Float!
    numberOfSplits: Int!
    members: [GroupMember]!
}

type GroupMember {
    id: String!
    email: String!
}

type Member {
    id: String!
    email: String!
    name: String!
    avatar: String!
}

type Split {
    id: String!
    total: Int!
    groupId: String!
    description: String!
    members: [SplitMember]!
    payedBy: Member!
    submittedBy: Member!
}

type SplitMember {
    id: String!
    locked: Boolean!
    share: Float!
}

type Settlement {
    totalSplits: Int!
    members: [SettlementMember]!
}

type SettlementMember {
    userId: String!
    balance: Float!
}
