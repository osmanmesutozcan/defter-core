type Query {
    groups: [Group]!
    affiliations: [Member]!
    splits(groupId: String!): [Split]!
    settlement(groupId: String!): Settlement!
}

type Mutation {
    createUser(username: String!, email: String!): String!
    createGroup(name: String! currency: String! members: [GroupMemberInput]!): String!
    addSplitToGroup(groupId: String! payedBy: String! total: Int! description: String! members: [SplitMemberInput]!): String!
}

input SplitMemberInput {
    id: String!
    locked: Boolean!
    share: Float!
}

input GroupMemberInput {
    id: String!
    email: String!
}

type Group {
    id: String!
    name: String!
    currency: String!
    #    updateAt: String!
    balance: Float!
    numberOfSplits: Int!
    members: [GroupMember]!
}

type GroupMember {
    id: String!
    email: String!
}

type Member {
    id: String!
    email: String!
    username: String!
    avatar: String!
}

type Split {
    id: String!
    total: Int!
    groupId: String!
    description: String!
    members: [SplitMember]!
    payedBy: Member!
    submittedBy: Member!
}

type SplitMember {
    id: String!
    locked: Boolean!
    share: Float!
}

type Settlement {
    totalSplits: Int!
    members: [SettlementMember]!
}

type SettlementMember {
    userId: String!
    balance: Float!
}
